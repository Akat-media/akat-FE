import React, { useState, useEffect } from 'react';
import {
  Link2,
  AlertCircle,
  Facebook,
  Shield,
  Bell,
  MessageSquare,
  ChevronDown,
  Settings,
} from 'lucide-react';
import FacebookConnect from '../components/FacebookConnect';
import LarkConnect from '../components/LarkConnect';
import ConnectedPages from '../components/ConnectedPages';
import PanCakeConfig from '../components/PanCakeConfig';
import { applyMigrations } from '../lib/migration';
import { supabase } from '../lib/supabase';

interface Guide {
  title: string;
  steps: string[];
  tips: string[];
  links?: { text: string; url: string }[];
}

const guides: Record<string, Guide> = {
  default: {
    title: 'H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p k·∫øt n·ªëi',
    steps: [
      'Ch·ªçn n·ªÅn t·∫£ng b·∫°n mu·ªën k·∫øt n·ªëi (Facebook, Lark)',
      'ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n v√† y√™u c·∫ßu quy·ªÅn truy c·∫≠p',
      'Th·ª±c hi·ªán c√°c b∆∞·ªõc k·∫øt n·ªëi theo h∆∞·ªõng d·∫´n',
      'Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi sau khi ho√†n t·∫•t',
    ],
    tips: [
      'ƒê·∫£m b·∫£o b·∫°n c√≥ ƒë·∫ßy ƒë·ªß quy·ªÅn qu·∫£n tr·ªã tr√™n n·ªÅn t·∫£ng c·∫ßn k·∫øt n·ªëi',
      'L∆∞u √Ω c√°c gi·ªõi h·∫°n v√† ch√≠nh s√°ch c·ªßa t·ª´ng n·ªÅn t·∫£ng',
      'Ki·ªÉm tra k·ªπ c√°c quy·ªÅn truy c·∫≠p ƒë∆∞·ª£c y√™u c·∫ßu',
      'ƒê·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh trong qu√° tr√¨nh thi·∫øt l·∫≠p',
    ],
  },
  pancake: {
    title: 'üöÄ L·∫•y Pancake API Key',
    steps: [
      'Truy c·∫≠p: https://app.pancake.vn/business/api',
      'ƒêƒÉng nh·∫≠p t√†i kho·∫£n Pancake ‚Üí ch·ªçn doanh nghi·ªáp mu·ªën t√≠ch h·ª£p',
      'T·∫°o Key m·ªõi ho·∫∑c sao ch√©p Key c√≥ s·∫µn',
      'Th√™m Key v√†o ph·∫ßn c·∫•u h√¨nh t√≠ch h·ª£p c·ªßa AKA Platform',
    ],
    tips: [
      'Gi·ªØ API key an to√†n v√† kh√¥ng chia s·∫ª v·ªõi ng∆∞·ªùi kh√°c',
      'ƒê·∫£m b·∫£o doanh nghi·ªáp c√≥ quy·ªÅn truy c·∫≠p API',
      'Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi sau khi th√™m key',
      'L∆∞u √Ω c√°c gi·ªõi h·∫°n g·ªçi API c·ªßa PanCake',
    ],
    links: [
      {
        text: 'Trang qu·∫£n l√Ω API PanCake',
        url: 'https://app.pancake.vn/business/api',
      },
      {
        text: 'T√†i li·ªáu API PanCake',
        url: 'https://pancake.vn/api-docs',
      },
    ],
  },
  facebook: {
    title: 'H∆∞·ªõng d·∫´n k·∫øt n·ªëi Facebook Page',
    steps: [
      'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n Facebook c·ªßa b·∫°n',
      'Ch·ªçn Page b·∫°n mu·ªën k·∫øt n·ªëi',
      'C·∫•p quy·ªÅn truy c·∫≠p cho ·ª©ng d·ª•ng',
      'X√°c nh·∫≠n k·∫øt n·ªëi',
    ],
    tips: [
      'ƒê·∫£m b·∫£o b·∫°n l√† Admin c·ªßa Facebook Page',
      'Cho ph√©p ƒë·∫ßy ƒë·ªß c√°c quy·ªÅn ƒë∆∞·ª£c y√™u c·∫ßu',
      'Ki·ªÉm tra tr·∫°ng th√°i Page kh√¥ng b·ªã h·∫°n ch·∫ø',
    ],
    links: [
      {
        text: 'T√¨m hi·ªÉu th√™m v·ªÅ quy·ªÅn truy c·∫≠p Facebook Page',
        url: 'https://developers.facebook.com/docs/pages/access-tokens',
      },
      {
        text: 'Trung t√¢m tr·ª£ gi√∫p Facebook',
        url: 'https://www.facebook.com/help',
      },
    ],
  },
  'facebook-manage': {
    title: 'H∆∞·ªõng d·∫´n qu·∫£n l√Ω k·∫øt n·ªëi Facebook Page',
    steps: [
      'Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi c·ªßa c√°c Page',
      'L√†m m·ªõi k·∫øt n·ªëi n·∫øu c·∫ßn thi·∫øt',
      'Theo d√µi s·ªë li·ªáu v√† ho·∫°t ƒë·ªông c·ªßa Page',
      'Qu·∫£n l√Ω quy·ªÅn truy c·∫≠p v√† c√†i ƒë·∫∑t',
    ],
    tips: [
      'Th∆∞·ªùng xuy√™n ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi',
      'C·∫≠p nh·∫≠t token truy c·∫≠p khi h·∫øt h·∫°n',
      'Theo d√µi c√°c th√¥ng b√°o t·ª´ Facebook v·ªÅ thay ƒë·ªïi ch√≠nh s√°ch',
      'L∆∞u √Ω c√°c gi·ªõi h·∫°n v·ªÅ API v√† t·∫ßn su·∫•t g·ªçi',
    ],
    links: [
      {
        text: 'T√†i li·ªáu qu·∫£n l√Ω Facebook Page',
        url: 'https://www.facebook.com/business/help',
      },
    ],
  },
  'facebook-new': {
    title: 'H∆∞·ªõng d·∫´n th√™m k·∫øt n·ªëi Facebook Page m·ªõi',
    steps: [
      'ƒê·∫£m b·∫£o b·∫°n l√† Admin c·ªßa Facebook Page mu·ªën k·∫øt n·ªëi',
      'C·∫•p ƒë·∫ßy ƒë·ªß quy·ªÅn truy c·∫≠p cho ·ª©ng d·ª•ng',
      'X√°c nh·∫≠n th√¥ng tin v√† ho√†n t·∫•t k·∫øt n·ªëi',
      'Ki·ªÉm tra c√°c t√≠nh nƒÉng sau khi k·∫øt n·ªëi',
    ],
    tips: [
      'Ki·ªÉm tra tr·∫°ng th√°i Page kh√¥ng b·ªã h·∫°n ch·∫ø',
      'ƒê·∫£m b·∫£o Page kh√¥ng vi ph·∫°m ch√≠nh s√°ch c·ªßa Facebook',
      'Xem x√©t c√°c quy·ªÅn ƒë∆∞·ª£c y√™u c·∫ßu tr∆∞·ªõc khi c·∫•p ph√©p',
      'L∆∞u √Ω gi·ªõi h·∫°n s·ªë l∆∞·ª£ng Page c√≥ th·ªÉ k·∫øt n·ªëi',
    ],
    links: [
      {
        text: 'Ch√≠nh s√°ch Facebook Page',
        url: 'https://www.facebook.com/policies_center',
      },
    ],
  },
  lark: {
    title: 'H∆∞·ªõng d·∫´n k·∫øt n·ªëi Lark',
    steps: [
      'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n Lark c·ªßa b·∫°n',
      'T·∫°o ·ª©ng d·ª•ng trong Lark Developer Console',
      'C·∫•u h√¨nh Webhook URL v√† Event Subscriptions',
      'X√°c th·ª±c v√† k√≠ch ho·∫°t k·∫øt n·ªëi',
    ],
    tips: [
      'ƒê·∫£m b·∫£o ·ª©ng d·ª•ng ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát',
      'Ki·ªÉm tra c√°c quy·ªÅn c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫•p',
      'C·∫•u h√¨nh ƒë√∫ng URL callback',
    ],
    links: [
      {
        text: 'T√†i li·ªáu Lark Open Platform',
        url: 'https://open.larksuite.com/document',
      },
    ],
  },
};

interface ConnectionSection {
  id: string;
  title: string;
  icon: React.ElementType;
  color: string;
  description: string;
  type: string;
  features: { icon: React.ElementType; title: string; description: string }[];
  component: React.ComponentType<any>;
}

function ConnectionPage() {
  const [showConnectForm, setShowConnectForm] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);
  const [migrationRunning, setMigrationRunning] = useState(false);
  const [showPanCakeConfig, setShowPanCakeConfig] = useState(false);
  //  const [showGuide, setShowGuide] = useState<string | null>(null);
  const [connectedPagesCount, setConnectedPagesCount] = useState(0);
  const [showConnectedPages, setShowConnectedPages] = useState(false);
  const [currentGuide, setCurrentGuide] = useState<string>('default');

  // dem so luong page facebook da ket noi
  useEffect(() => {
    fetchConnectedPagesCount();
  }, [refreshKey]);

  const fetchConnectedPagesCount = async () => {
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) return;

      const { count } = await supabase
        .from('facebook_connections')
        .select('*', { count: 'exact' })
        .eq('user_id', user.id)
        .eq('status', 'connected');

      setConnectedPagesCount(count || 0);
    } catch (err) {
      console.error('Error fetching connected pages count:', err);
    }
  };

  const sections: ConnectionSection[] = [
    {
      id: 'facebook',
      title: `Facebook Pages (${connectedPagesCount})`,
      icon: Facebook,
      color: 'blue',
      description: 'K·∫øt n·ªëi v√† qu·∫£n l√Ω Facebook Pages',
      type: 'platform',
      features: [
        {
          icon: MessageSquare,
          title: 'Qu·∫£n l√Ω tin nh·∫Øn & b√¨nh lu·∫≠n',
          description: 'Tr·∫£ l·ªùi tin nh·∫Øn v√† b√¨nh lu·∫≠n t·ª± ƒë·ªông',
        },
        {
          icon: Bell,
          title: 'Th√¥ng b√°o',
          description: 'Nh·∫≠n th√¥ng b√°o v·ªÅ ho·∫°t ƒë·ªông c·ªßa trang',
        },
        {
          icon: Shield,
          title: 'B·∫£o m·∫≠t',
          description: 'Ki·ªÉm tra v√† c·∫£nh b√°o vi ph·∫°m',
        },
      ],
      component: FacebookConnect,
    },
    {
      id: 'lark',
      title: 'Lark',
      icon: MessageSquare,
      color: '[#00B0FF]',
      description: 'T√≠ch h·ª£p tin nh·∫Øn v·ªõi Lark',
      type: 'platform',
      features: [
        {
          icon: MessageSquare,
          title: 'ƒê·ªìng b·ªô tin nh·∫Øn',
          description: 'Qu·∫£n l√Ω tin nh·∫Øn t·ª´ nhi·ªÅu k√™nh',
        },
        {
          icon: Bell,
          title: 'Th√¥ng b√°o t·ª©c th√¨',
          description: 'Nh·∫≠n th√¥ng b√°o qua Lark',
        },
      ],
      component: LarkConnect,
    },
    {
      id: 'pancake',
      title: 'PanCake',
      icon: Link2,
      color: 'purple',
      description: 'T√≠ch h·ª£p v·ªõi PanCake ƒë·ªÉ qu·∫£n l√Ω ƒë∆°n h√†ng',
      type: 'integration',
      features: [
        {
          icon: MessageSquare,
          title: 'ƒê·ªìng b·ªô ƒë∆°n h√†ng',
          description: 'T·ª± ƒë·ªông ƒë·ªìng b·ªô ƒë∆°n h√†ng t·ª´ PanCake',
        },
        {
          icon: Bell,
          title: 'Th√¥ng b√°o ƒë∆°n h√†ng',
          description: 'Nh·∫≠n th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi',
        },
      ],
      component: LarkConnect,
    },
    {
      id: 'nhanh',
      title: 'Nhanh.VN',
      icon: Link2,
      color: 'green',
      description: 'T√≠ch h·ª£p v·ªõi Nhanh.VN ƒë·ªÉ qu·∫£n l√Ω kho v√† ƒë∆°n h√†ng',
      type: 'integration',
      features: [
        {
          icon: MessageSquare,
          title: 'ƒê·ªìng b·ªô kho',
          description: 'T·ª± ƒë·ªông ƒë·ªìng b·ªô t·ªìn kho v√† gi√°',
        },
        {
          icon: Bell,
          title: 'Th√¥ng b√°o ƒë∆°n h√†ng',
          description: 'Nh·∫≠n th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi',
        },
      ],
      component: LarkConnect,
    },
    {
      id: 'sapo',
      title: 'Sapo',
      icon: Link2,
      color: 'orange',
      description: 'T√≠ch h·ª£p v·ªõi Sapo ƒë·ªÉ qu·∫£n l√Ω b√°n h√†ng',
      type: 'integration',
      features: [
        {
          icon: MessageSquare,
          title: 'ƒê·ªìng b·ªô s·∫£n ph·∫©m',
          description: 'T·ª± ƒë·ªông ƒë·ªìng b·ªô s·∫£n ph·∫©m v√† t·ªìn kho',
        },
        {
          icon: Bell,
          title: 'Th√¥ng b√°o ƒë∆°n h√†ng',
          description: 'Nh·∫≠n th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi',
        },
      ],
      component: LarkConnect,
    },
  ];

  // chay migration tao bang fb_connection, fb_page_details, policy RLS
  useEffect(() => {
    const runMigrations = async () => {
      try {
        setMigrationRunning(true);
        setError(null);

        const result = await applyMigrations();
        if (!result.success) {
          console.error('Migration failed:', result.error);
          setError(`Database setup failed: ${result.error}`);
        }
      } catch (err) {
        console.error('Migration error:', err);
        setError(err instanceof Error ? err.message : 'Failed to set up database');
      } finally {
        setMigrationRunning(false);
      }
    };

    runMigrations();
  }, []);

  const handleConnectSuccess = () => {
    setShowConnectForm(null);
    setRefreshKey((prev) => prev + 1);
    setShowConnectedPages(true);
  };

  const toggleSection = (sectionId: string) => {
    setExpandedSection(expandedSection === sectionId ? null : sectionId);
    // console.log("expandedSection: " + expandedSection);
    setShowConnectForm(null);
    // console.log("showConnectForm: " + showConnectForm);
    setCurrentGuide(sectionId);
    // console.log("currentGuide: " + currentGuide);
    setShowConnectedPages(false);
    // console.log("showConnectedPages: " + showConnectedPages);
  };

  // section huong dan ben phai
  const renderGuide = (guideId: string) => {
    const guide = guides[guideId];
    if (!guide) return null;

    return (
      <div className="space-y-6 p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl">
        <div className="flex items-start gap-3">
          <div className="p-2 bg-blue-100 rounded-lg">
            <AlertCircle className="w-5 h-5 text-blue-600" />
          </div>
          <div>
            <h4 className="font-medium text-blue-900">{guide.title}</h4>
            <div className="mt-4 space-y-4">
              <div>
                <h5 className="font-medium text-blue-800 mb-2">C√°c b∆∞·ªõc th·ª±c hi·ªán:</h5>
                <ol className="space-y-2">
                  {guide.steps.map((step, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="flex items-center justify-center w-5 h-5 bg-blue-100 text-blue-800 rounded-full text-xs font-medium mt-0.5">
                        {index + 1}
                      </span>
                      <span className="text-blue-800">{step}</span>
                    </li>
                  ))}
                </ol>
              </div>

              <div>
                <h5 className="font-medium text-blue-800 mb-2">L∆∞u √Ω:</h5>
                <ul className="space-y-1">
                  {guide.tips.map((tip, index) => (
                    <li key={index} className="flex items-start gap-2 text-blue-800">
                      <span className="text-blue-500">‚Ä¢</span>
                      {tip}
                    </li>
                  ))}
                </ul>
              </div>

              {guide.links && guide.links.length > 0 && (
                <div>
                  <h5 className="font-medium text-blue-800 mb-2">T√†i li·ªáu tham kh·∫£o:</h5>
                  <ul className="space-y-1">
                    {guide.links.map((link, index) => (
                      <li key={index}>
                        <a
                          href={link.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-800 hover:underline"
                        >
                          {link.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // icon loading page khi vao trang
  if (migrationRunning) {
    return (
      <div className="p-4 sm:p-8 flex flex-col items-center justify-center min-h-[50vh]">
        <div className="w-10 h-10 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4" />
        <h2 className="text-xl font-semibold mb-2">ƒêang chu·∫©n b·ªã d·ªØ li·ªáu</h2>
        <p className="text-gray-600">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
      </div>
    );
  }

  /**
   *  Hi·ªÉn th·ªã n·ªôi dung c·ªßa Facebook Section
   */
  const renderFacebookSection = () => {
    // Tr∆∞·ªùng h·ª£p ƒëang hi·ªÉn th·ªã form k·∫øt n·ªëi
    if (showConnectForm === 'facebook') {
      return <FacebookConnect onConnect={handleConnectSuccess} />;
    }

    // Tr∆∞·ªùng h·ª£p ƒëang hi·ªÉn th·ªã danh s√°ch trang ƒë√£ k·∫øt n·ªëi
    if (showConnectedPages) {
      return <ConnectedPages key={refreshKey} />;
    }

    // Tr∆∞·ªùng h·ª£p m·∫∑c ƒë·ªãnh - hi·ªÉn th·ªã c√°c n√∫t t√πy ch·ªçn
    return (
      <div className="space-y-4 pt-3">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {/* N√∫t Qu·∫£n l√Ω k·∫øt n·ªëi */}
          <button
            onClick={() => {
              setShowConnectedPages(true);
              setCurrentGuide('facebook-manage');
            }}
            className="flex items-center gap-3 p-4 bg-gradient-to-br from-blue-50 to-blue-100/50 rounded-xl hover:from-blue-100 hover:to-blue-200/50 transition-all duration-200"
          >
            <div className="p-2 bg-blue-100 rounded-lg">
              <Settings className="w-5 h-5 text-blue-600" />
            </div>
            <div className="text-left">
              <h3 className="font-medium">Qu·∫£n l√Ω k·∫øt n·ªëi</h3>
              <p className="text-sm text-gray-600">Qu·∫£n l√Ω c√°c Facebook Pages ƒë√£ k·∫øt n·ªëi</p>
            </div>
          </button>

          {/* N√∫t Th√™m k·∫øt n·ªëi m·ªõi */}
          <button
            onClick={() => {
              setShowConnectForm('facebook');
              setCurrentGuide('facebook-new');
            }}
            className="flex items-center gap-3 p-4 bg-gradient-to-br from-blue-50 to-blue-100/50 rounded-xl hover:from-blue-100 hover:to-blue-200/50 transition-all duration-200"
          >
            <div className="p-2 bg-blue-100 rounded-lg">
              <div className="relative">
                <Facebook className="w-5 h-5 text-blue-600" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 text-xs font-bold">+</span>
                </div>
              </div>
            </div>
            <div className="text-left">
              <h3 className="font-medium">Th√™m k·∫øt n·ªëi m·ªõi</h3>
              <p className="text-sm text-gray-600">K·∫øt n·ªëi th√™m Facebook Page</p>
            </div>
          </button>
        </div>
      </div>
    );
  };

  // Hi·ªÉn th·ªã n·ªôi dung c·ªßa c√°c section kh√°c
  const renderOtherSection = () => {
    // return <section.component onConnect={handleConnectSuccess} />;
  };

  return (
    <div className="p-4 sm:p-8 max-w-[1600px] mx-auto">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-xl sm:text-2xl font-bold">Thi·∫øt l·∫≠p k·∫øt n·ªëi</h1>
      </div>

      <div className="lg:grid lg:grid-cols-12 lg:gap-8">
        <div className="lg:col-span-7 space-y-6">
          {/* Platform Connections */}
          <div>
            <h2 className="text-lg font-semibold mb-4">K·∫øt n·ªëi n·ªÅn t·∫£ng</h2>
            <div className="space-y-3">
              {sections
                .filter((section) => section.type === 'platform')
                .map((section) => (
                  <div key={section.id} className="bg-white rounded-lg shadow-sm overflow-hidden">
                    <button
                      onClick={() => toggleSection(section.id)}
                      className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
                    >
                      <div className="flex items-center gap-3">
                        <div className={`p-1.5 bg-${section.color}-100 rounded-lg`}>
                          <section.icon className={`w-4 h-4 text-${section.color}-600`} />
                        </div>
                        <div className="text-left">
                          <h2 className="text-base font-medium">{section.title}</h2>
                          <p className="text-xs text-gray-600">{section.description}</p>
                        </div>
                      </div>
                      {/*mui ten icon*/}
                      <ChevronDown
                        className={`w-4 h-4 text-gray-400 transition-transform ${
                          expandedSection === section.id ? 'rotate-180' : ''
                        }`}
                      />
                    </button>

                    {/*HERE*/}
                    {expandedSection === section.id && (
                      <div className="px-4 pb-4">
                        {section.id === 'facebook' ? renderFacebookSection() : renderOtherSection()}
                      </div>
                    )}
                  </div>
                ))}
            </div>
          </div>

          {/* Integrations */}
          <div>
            <h2 className="text-lg font-semibold mb-4">T√≠ch h·ª£p</h2>
            <div className="space-y-3">
              {sections
                .filter((section) => section.type === 'integration')
                .map((section) => (
                  <div key={section.id} className="bg-white rounded-lg shadow-sm overflow-hidden">
                    <button
                      onClick={() => toggleSection(section.id)}
                      className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
                    >
                      <div className="flex items-center gap-3">
                        <div className={`p-1.5 bg-${section.color}-100 rounded-lg`}>
                          <section.icon className={`w-4 h-4 text-${section.color}-600`} />
                        </div>
                        <div className="text-left">
                          <h2 className="text-base font-medium">{section.title}</h2>
                          <p className="text-xs text-gray-600">{section.description}</p>
                        </div>
                      </div>
                      <ChevronDown
                        className={`w-4 h-4 text-gray-400 transition-transform ${
                          expandedSection === section.id ? 'rotate-180' : ''
                        }`}
                      />
                    </button>

                    {expandedSection === section.id && (
                      <div className="px-4 pb-4">
                        {section.id === 'pancake' ? (
                          <div className="space-y-4">
                            <div className="p-4 bg-gradient-to-br from-purple-50 to-purple-100/50 rounded-xl">
                              <div className="flex items-center gap-3 mb-3">
                                <div className="p-2 bg-purple-100 rounded-lg">
                                  <Settings className="w-5 h-5 text-purple-600" />
                                </div>
                                <h3 className="font-medium">C·∫•u h√¨nh PanCake API</h3>
                              </div>
                              <p className="text-sm text-gray-600 mb-4">
                                Th√™m API key ƒë·ªÉ k·∫øt n·ªëi v·ªõi PanCake v√† qu·∫£n l√Ω ƒë∆°n h√†ng
                              </p>
                              <button
                                onClick={() => setShowPanCakeConfig(true)}
                                className="w-full bg-purple-600 text-white py-2 rounded-lg hover:bg-purple-700 transition-colors"
                              >
                                Th√™m API key
                              </button>
                            </div>
                          </div>
                        ) : (
                          <section.component onConnect={handleConnectSuccess} />
                        )}
                      </div>
                    )}
                  </div>
                ))}
            </div>
          </div>

          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
              {error}
            </div>
          )}
        </div>

        {/* Guide Section - Hidden on mobile, shown on desktop */}
        {/*section huong dan*/}
        <div className="hidden lg:block lg:col-span-5 space-y-4">
          <div className="bg-white rounded-lg shadow-sm p-6 sticky top-4">
            <h2 className="text-lg font-semibold mb-4">H∆∞·ªõng d·∫´n</h2>
            {renderGuide(!expandedSection ? 'default' : currentGuide)}
          </div>
        </div>

        {/* Guide Section - Shown on mobile only */}
        <div className="mt-6 lg:hidden space-y-4">
          {renderGuide(!expandedSection ? 'default' : currentGuide)}
        </div>
      </div>

      {/* PanCake Config Modal */}
      {showPanCakeConfig && <PanCakeConfig onClose={() => setShowPanCakeConfig(false)} />}
    </div>
  );
}

export default ConnectionPage;
